// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/lend.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	usecase "github.com/GregChrisnaDev/Amartha-Sol-3/internal/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockLendUsecase is a mock of LendUsecase interface.
type MockLendUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLendUsecaseMockRecorder
}

// MockLendUsecaseMockRecorder is the mock recorder for MockLendUsecase.
type MockLendUsecaseMockRecorder struct {
	mock *MockLendUsecase
}

// NewMockLendUsecase creates a new mock instance.
func NewMockLendUsecase(ctrl *gomock.Controller) *MockLendUsecase {
	mock := &MockLendUsecase{ctrl: ctrl}
	mock.recorder = &MockLendUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLendUsecase) EXPECT() *MockLendUsecaseMockRecorder {
	return m.recorder
}

// GetAgreementLetter mocks base method.
func (m *MockLendUsecase) GetAgreementLetter(ctx context.Context, params usecase.GetAgreementLetterReq) (usecase.FileResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgreementLetter", ctx, params)
	ret0, _ := ret[0].(usecase.FileResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgreementLetter indicates an expected call of GetAgreementLetter.
func (mr *MockLendUsecaseMockRecorder) GetAgreementLetter(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementLetter", reflect.TypeOf((*MockLendUsecase)(nil).GetAgreementLetter), ctx, params)
}

// GetListLend mocks base method.
func (m *MockLendUsecase) GetListLend(ctx context.Context, params uint64) ([]usecase.GetLendResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListLend", ctx, params)
	ret0, _ := ret[0].([]usecase.GetLendResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListLend indicates an expected call of GetListLend.
func (mr *MockLendUsecaseMockRecorder) GetListLend(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListLend", reflect.TypeOf((*MockLendUsecase)(nil).GetListLend), ctx, params)
}

// Invest mocks base method.
func (m *MockLendUsecase) Invest(ctx context.Context, params usecase.InvestReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Invest", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// Invest indicates an expected call of Invest.
func (mr *MockLendUsecaseMockRecorder) Invest(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Invest", reflect.TypeOf((*MockLendUsecase)(nil).Invest), ctx, params)
}

// Simulate mocks base method.
func (m *MockLendUsecase) Simulate(ctx context.Context, params usecase.LendSimulateReq) (usecase.LendSimulateResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Simulate", ctx, params)
	ret0, _ := ret[0].(usecase.LendSimulateResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Simulate indicates an expected call of Simulate.
func (mr *MockLendUsecaseMockRecorder) Simulate(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Simulate", reflect.TypeOf((*MockLendUsecase)(nil).Simulate), ctx, params)
}
