// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/usecase/loan.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	context "context"
	reflect "reflect"

	usecase "github.com/GregChrisnaDev/Amartha-Sol-3/internal/usecase"
	gomock "github.com/golang/mock/gomock"
)

// MockLoanUsecase is a mock of LoanUsecase interface.
type MockLoanUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoanUsecaseMockRecorder
}

// MockLoanUsecaseMockRecorder is the mock recorder for MockLoanUsecase.
type MockLoanUsecaseMockRecorder struct {
	mock *MockLoanUsecase
}

// NewMockLoanUsecase creates a new mock instance.
func NewMockLoanUsecase(ctrl *gomock.Controller) *MockLoanUsecase {
	mock := &MockLoanUsecase{ctrl: ctrl}
	mock.recorder = &MockLoanUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanUsecase) EXPECT() *MockLoanUsecaseMockRecorder {
	return m.recorder
}

// ApproveLoan mocks base method.
func (m *MockLoanUsecase) ApproveLoan(ctx context.Context, params usecase.PromoteLoanToApprovedReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveLoan", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveLoan indicates an expected call of ApproveLoan.
func (mr *MockLoanUsecaseMockRecorder) ApproveLoan(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveLoan", reflect.TypeOf((*MockLoanUsecase)(nil).ApproveLoan), ctx, params)
}

// DisbursedLoan mocks base method.
func (m *MockLoanUsecase) DisbursedLoan(ctx context.Context, params usecase.PromoteLoanToDisburseReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisbursedLoan", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisbursedLoan indicates an expected call of DisbursedLoan.
func (mr *MockLoanUsecaseMockRecorder) DisbursedLoan(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisbursedLoan", reflect.TypeOf((*MockLoanUsecase)(nil).DisbursedLoan), ctx, params)
}

// GetAgreementLetter mocks base method.
func (m *MockLoanUsecase) GetAgreementLetter(ctx context.Context, params usecase.GetAgreementLetterReq) (usecase.FileResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgreementLetter", ctx, params)
	ret0, _ := ret[0].(usecase.FileResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgreementLetter indicates an expected call of GetAgreementLetter.
func (mr *MockLoanUsecaseMockRecorder) GetAgreementLetter(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementLetter", reflect.TypeOf((*MockLoanUsecase)(nil).GetAgreementLetter), ctx, params)
}

// GetListApprovedLoan mocks base method.
func (m *MockLoanUsecase) GetListApprovedLoan(ctx context.Context) ([]usecase.GetLoanResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListApprovedLoan", ctx)
	ret0, _ := ret[0].([]usecase.GetLoanResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListApprovedLoan indicates an expected call of GetListApprovedLoan.
func (mr *MockLoanUsecaseMockRecorder) GetListApprovedLoan(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListApprovedLoan", reflect.TypeOf((*MockLoanUsecase)(nil).GetListApprovedLoan), ctx)
}

// GetListLender mocks base method.
func (m *MockLoanUsecase) GetListLender(ctx context.Context, params usecase.GetListLender) ([]usecase.GetLendResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListLender", ctx, params)
	ret0, _ := ret[0].([]usecase.GetLendResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListLender indicates an expected call of GetListLender.
func (mr *MockLoanUsecaseMockRecorder) GetListLender(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListLender", reflect.TypeOf((*MockLoanUsecase)(nil).GetListLender), ctx, params)
}

// GetLoanByLoanUID mocks base method.
func (m *MockLoanUsecase) GetLoanByLoanUID(ctx context.Context, userId uint64) ([]usecase.GetLoanResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByLoanUID", ctx, userId)
	ret0, _ := ret[0].([]usecase.GetLoanResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByLoanUID indicates an expected call of GetLoanByLoanUID.
func (mr *MockLoanUsecaseMockRecorder) GetLoanByLoanUID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByLoanUID", reflect.TypeOf((*MockLoanUsecase)(nil).GetLoanByLoanUID), ctx, userId)
}

// GetProofPicture mocks base method.
func (m *MockLoanUsecase) GetProofPicture(ctx context.Context, loanId uint64) (usecase.FileResp, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProofPicture", ctx, loanId)
	ret0, _ := ret[0].(usecase.FileResp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProofPicture indicates an expected call of GetProofPicture.
func (mr *MockLoanUsecaseMockRecorder) GetProofPicture(ctx, loanId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProofPicture", reflect.TypeOf((*MockLoanUsecase)(nil).GetProofPicture), ctx, loanId)
}

// ProposeLoan mocks base method.
func (m *MockLoanUsecase) ProposeLoan(ctx context.Context, params usecase.ProposeLoanReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeLoan", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProposeLoan indicates an expected call of ProposeLoan.
func (mr *MockLoanUsecaseMockRecorder) ProposeLoan(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeLoan", reflect.TypeOf((*MockLoanUsecase)(nil).ProposeLoan), ctx, params)
}

// Simulate mocks base method.
func (m *MockLoanUsecase) Simulate(ctx context.Context, params usecase.SimulateLoanReq) usecase.SimulateLoanResp {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Simulate", ctx, params)
	ret0, _ := ret[0].(usecase.SimulateLoanResp)
	return ret0
}

// Simulate indicates an expected call of Simulate.
func (mr *MockLoanUsecaseMockRecorder) Simulate(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Simulate", reflect.TypeOf((*MockLoanUsecase)(nil).Simulate), ctx, params)
}
