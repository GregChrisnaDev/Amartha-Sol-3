// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/repository/loan.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/GregChrisnaDev/Amartha-Sol-3/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockLoanRepository is a mock of LoanRepository interface.
type MockLoanRepository struct {
	ctrl     *gomock.Controller
	recorder *MockLoanRepositoryMockRecorder
}

// MockLoanRepositoryMockRecorder is the mock recorder for MockLoanRepository.
type MockLoanRepositoryMockRecorder struct {
	mock *MockLoanRepository
}

// NewMockLoanRepository creates a new mock instance.
func NewMockLoanRepository(ctrl *gomock.Controller) *MockLoanRepository {
	mock := &MockLoanRepository{ctrl: ctrl}
	mock.recorder = &MockLoanRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoanRepository) EXPECT() *MockLoanRepositoryMockRecorder {
	return m.recorder
}

// GetAgreementFilePath mocks base method.
func (m *MockLoanRepository) GetAgreementFilePath(ctx context.Context, lendId, loanId, userId uint64) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgreementFilePath", ctx, lendId, loanId, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgreementFilePath indicates an expected call of GetAgreementFilePath.
func (mr *MockLoanRepositoryMockRecorder) GetAgreementFilePath(ctx, lendId, loanId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementFilePath", reflect.TypeOf((*MockLoanRepository)(nil).GetAgreementFilePath), ctx, lendId, loanId, userId)
}

// GetByIDStatus mocks base method.
func (m *MockLoanRepository) GetByIDStatus(ctx context.Context, loanId uint64, status int8) (model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByIDStatus", ctx, loanId, status)
	ret0, _ := ret[0].(model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByIDStatus indicates an expected call of GetByIDStatus.
func (mr *MockLoanRepositoryMockRecorder) GetByIDStatus(ctx, loanId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByIDStatus", reflect.TypeOf((*MockLoanRepository)(nil).GetByIDStatus), ctx, loanId, status)
}

// GetListByStatus mocks base method.
func (m *MockLoanRepository) GetListByStatus(ctx context.Context, status int8) ([]model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByStatus", ctx, status)
	ret0, _ := ret[0].([]model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByStatus indicates an expected call of GetListByStatus.
func (mr *MockLoanRepositoryMockRecorder) GetListByStatus(ctx, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByStatus", reflect.TypeOf((*MockLoanRepository)(nil).GetListByStatus), ctx, status)
}

// GetLoanByID mocks base method.
func (m *MockLoanRepository) GetLoanByID(ctx context.Context, loanId uint64) (model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByID", ctx, loanId)
	ret0, _ := ret[0].(model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByID indicates an expected call of GetLoanByID.
func (mr *MockLoanRepositoryMockRecorder) GetLoanByID(ctx, loanId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByID", reflect.TypeOf((*MockLoanRepository)(nil).GetLoanByID), ctx, loanId)
}

// GetLoanByUID mocks base method.
func (m *MockLoanRepository) GetLoanByUID(ctx context.Context, userId uint64) ([]model.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoanByUID", ctx, userId)
	ret0, _ := ret[0].([]model.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoanByUID indicates an expected call of GetLoanByUID.
func (mr *MockLoanRepositoryMockRecorder) GetLoanByUID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoanByUID", reflect.TypeOf((*MockLoanRepository)(nil).GetLoanByUID), ctx, userId)
}

// LoanExist mocks base method.
func (m *MockLoanRepository) LoanExist(ctx context.Context, loanId uint64, status int8) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoanExist", ctx, loanId, status)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoanExist indicates an expected call of LoanExist.
func (mr *MockLoanRepositoryMockRecorder) LoanExist(ctx, loanId, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoanExist", reflect.TypeOf((*MockLoanRepository)(nil).LoanExist), ctx, loanId, status)
}

// PendingLoanExist mocks base method.
func (m *MockLoanRepository) PendingLoanExist(ctx context.Context, userId uint64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingLoanExist", ctx, userId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingLoanExist indicates an expected call of PendingLoanExist.
func (mr *MockLoanRepositoryMockRecorder) PendingLoanExist(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingLoanExist", reflect.TypeOf((*MockLoanRepository)(nil).PendingLoanExist), ctx, userId)
}

// PromoteLoanToApproved mocks base method.
func (m *MockLoanRepository) PromoteLoanToApproved(ctx context.Context, params model.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteLoanToApproved", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// PromoteLoanToApproved indicates an expected call of PromoteLoanToApproved.
func (mr *MockLoanRepositoryMockRecorder) PromoteLoanToApproved(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteLoanToApproved", reflect.TypeOf((*MockLoanRepository)(nil).PromoteLoanToApproved), ctx, params)
}

// PromoteLoanToDisbursed mocks base method.
func (m *MockLoanRepository) PromoteLoanToDisbursed(ctx context.Context, params model.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteLoanToDisbursed", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// PromoteLoanToDisbursed indicates an expected call of PromoteLoanToDisbursed.
func (mr *MockLoanRepositoryMockRecorder) PromoteLoanToDisbursed(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteLoanToDisbursed", reflect.TypeOf((*MockLoanRepository)(nil).PromoteLoanToDisbursed), ctx, params)
}

// PromoteLoanToInvested mocks base method.
func (m *MockLoanRepository) PromoteLoanToInvested(ctx context.Context, loanId uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromoteLoanToInvested", ctx, loanId)
	ret0, _ := ret[0].(error)
	return ret0
}

// PromoteLoanToInvested indicates an expected call of PromoteLoanToInvested.
func (mr *MockLoanRepositoryMockRecorder) PromoteLoanToInvested(ctx, loanId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromoteLoanToInvested", reflect.TypeOf((*MockLoanRepository)(nil).PromoteLoanToInvested), ctx, loanId)
}

// ProposeLoan mocks base method.
func (m *MockLoanRepository) ProposeLoan(ctx context.Context, params model.Loan) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProposeLoan", ctx, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ProposeLoan indicates an expected call of ProposeLoan.
func (mr *MockLoanRepositoryMockRecorder) ProposeLoan(ctx, params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProposeLoan", reflect.TypeOf((*MockLoanRepository)(nil).ProposeLoan), ctx, params)
}
