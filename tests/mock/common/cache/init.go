// Code generated by MockGen. DO NOT EDIT.
// Source: ./common/cache/init.go

// Package mock_cache is a generated GoMock package.
package mock_cache

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockRedisLock is a mock of RedisLock interface.
type MockRedisLock struct {
	ctrl     *gomock.Controller
	recorder *MockRedisLockMockRecorder
}

// MockRedisLockMockRecorder is the mock recorder for MockRedisLock.
type MockRedisLockMockRecorder struct {
	mock *MockRedisLock
}

// NewMockRedisLock creates a new mock instance.
func NewMockRedisLock(ctrl *gomock.Controller) *MockRedisLock {
	mock := &MockRedisLock{ctrl: ctrl}
	mock.recorder = &MockRedisLockMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisLock) EXPECT() *MockRedisLockMockRecorder {
	return m.recorder
}

// Acquire mocks base method.
func (m *MockRedisLock) Acquire(ctx context.Context, key string, expiry, delay time.Duration) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Acquire", ctx, key, expiry, delay)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Acquire indicates an expected call of Acquire.
func (mr *MockRedisLockMockRecorder) Acquire(ctx, key, expiry, delay interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Acquire", reflect.TypeOf((*MockRedisLock)(nil).Acquire), ctx, key, expiry, delay)
}

// Release mocks base method.
func (m *MockRedisLock) Release(ctx context.Context, key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release", ctx, key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockRedisLockMockRecorder) Release(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockRedisLock)(nil).Release), ctx, key)
}
