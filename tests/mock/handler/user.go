// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler/user.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUserHandler is a mock of UserHandler interface.
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler.
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance.
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// GetAllUserHandler mocks base method.
func (m *MockUserHandler) GetAllUserHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAllUserHandler", w, r)
}

// GetAllUserHandler indicates an expected call of GetAllUserHandler.
func (mr *MockUserHandlerMockRecorder) GetAllUserHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUserHandler", reflect.TypeOf((*MockUserHandler)(nil).GetAllUserHandler), w, r)
}

// UserGenerateHandler mocks base method.
func (m *MockUserHandler) UserGenerateHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UserGenerateHandler", w, r)
}

// UserGenerateHandler indicates an expected call of UserGenerateHandler.
func (mr *MockUserHandlerMockRecorder) UserGenerateHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserGenerateHandler", reflect.TypeOf((*MockUserHandler)(nil).UserGenerateHandler), w, r)
}
