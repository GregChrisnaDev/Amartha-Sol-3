// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handler/lend.go

// Package mock_handler is a generated GoMock package.
package mock_handler

import (
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLendHandler is a mock of LendHandler interface.
type MockLendHandler struct {
	ctrl     *gomock.Controller
	recorder *MockLendHandlerMockRecorder
}

// MockLendHandlerMockRecorder is the mock recorder for MockLendHandler.
type MockLendHandlerMockRecorder struct {
	mock *MockLendHandler
}

// NewMockLendHandler creates a new mock instance.
func NewMockLendHandler(ctrl *gomock.Controller) *MockLendHandler {
	mock := &MockLendHandler{ctrl: ctrl}
	mock.recorder = &MockLendHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLendHandler) EXPECT() *MockLendHandlerMockRecorder {
	return m.recorder
}

// GetAgreementLetterHandler mocks base method.
func (m *MockLendHandler) GetAgreementLetterHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetAgreementLetterHandler", w, r)
}

// GetAgreementLetterHandler indicates an expected call of GetAgreementLetterHandler.
func (mr *MockLendHandlerMockRecorder) GetAgreementLetterHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgreementLetterHandler", reflect.TypeOf((*MockLendHandler)(nil).GetAgreementLetterHandler), w, r)
}

// GetListLenderHandler mocks base method.
func (m *MockLendHandler) GetListLenderHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "GetListLenderHandler", w, r)
}

// GetListLenderHandler indicates an expected call of GetListLenderHandler.
func (mr *MockLendHandlerMockRecorder) GetListLenderHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListLenderHandler", reflect.TypeOf((*MockLendHandler)(nil).GetListLenderHandler), w, r)
}

// InvestHandler mocks base method.
func (m *MockLendHandler) InvestHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InvestHandler", w, r)
}

// InvestHandler indicates an expected call of InvestHandler.
func (mr *MockLendHandlerMockRecorder) InvestHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvestHandler", reflect.TypeOf((*MockLendHandler)(nil).InvestHandler), w, r)
}

// SimulateHandler mocks base method.
func (m *MockLendHandler) SimulateHandler(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SimulateHandler", w, r)
}

// SimulateHandler indicates an expected call of SimulateHandler.
func (mr *MockLendHandlerMockRecorder) SimulateHandler(w, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimulateHandler", reflect.TypeOf((*MockLendHandler)(nil).SimulateHandler), w, r)
}
